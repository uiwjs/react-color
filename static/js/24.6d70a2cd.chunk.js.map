{"version":3,"file":"static/js/24.6d70a2cd.chunk.js","mappings":"8HACA,SACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,k6SACRC,SAAS,GACTC,aAAa,G","sources":["../../packages/color-convert/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"Color Convert\\n===\\n\\n[![Buy me a coffee](https://img.shields.io/badge/Buy%20me%20a%20coffee-048754?logo=buymeacoffee)](https://jaywcjlove.github.io/#/sponsor)\\n[![npm bundle size](https://img.shields.io/bundlephobia/minzip/@uiw/color-convert)](https://bundlephobia.com/package/@uiw/color-convert) [![npm version](https://img.shields.io/npm/v/@uiw/color-convert.svg)](https://www.npmjs.com/package/@uiw/color-convert) [![Open in unpkg](https://img.shields.io/badge/Open%20in-unpkg-blue)](https://uiwjs.github.io/npm-unpkg/#/pkg/@uiw/color-convert/file/README.md)\\n\\n## Install\\n\\n```bash\\nnpm i @uiw/color-convert\\n```\\n\\n## Usage\\n\\n```js\\nimport { hsvaToHsla } from '@uiw/color-convert'\\n```\\n\\n## API\\n\\n#### `rgbaToHsva`\\n\\n```js\\nrgbaToHsva({ r: 255, g: 255, b: 255, a: 1 }) //=> { h: 0, s: 0, v: 100, a: 1 }\\n```\\n\\n#### `hexToHsva`\\n\\n```js\\nhexToHsva(\\\"#ffffff\\\") //=> { h: 0, s: 0, v: 100, a: 1 }\\n```\\n\\n#### `hsvaToHex`\\n\\n```js\\nhsvaToHex({ h: 0, s: 0, v: 100, a: 1 }) // => \\\"#ffffff\\\"\\n```\\n\\n#### `hsvaToHexa`\\n\\n```js\\nhsvaToHexa({ h: 0, s: 0, v: 30, a: 0.4875 }) // => '#4d4d4d7c'\\nhsvaToHexa({ h: 0, s: 0, v: 100, a: 1 }) // => '#ffffffff'\\nhsvaToHexa({ h: 60, s: 100, v: 100, a: 1 }) // => '#ffff00ff'\\n```\\n\\n#### `hsvaToHsla`\\n\\n```js\\nhsvaToHsla({ h: 0, s: 0, v: 100, a: 1 }) // => { h: 0, s: 0, l: 100, a: 1 }\\n```\\n\\n#### `hslaToHsva`\\n\\n```js\\nhslaToHsva({ h: 0, s: 100, l: 50, a: 1 }) // => { h: 0, s: 100, v: 100, a: 1 }\\nhslaToHsva({ h: 0, s: 0, l: 0, a: 1 }) // => { h: 0, s: 0, v: 0, a: 1 }\\nhslaToHsva({ h: 200, s: 25, l: 32, a: 1 }) // => { h: 200, s: 40, v: 40, a: 1 }\\n```\\n\\n#### `hslStringToHsla`\\n\\n```js\\nhslStringToHsla('')\\n// => { h: undefined, s: undefined, l: undefined, a: undefined }\\nhslStringToHsla('hsl(50, 10%, 10%)')\\n// => { h: 50, s: 10, l: 10 }\\nhslStringToHsla('hsl(49deg 90% 65% / 39%)')\\n// => { h: 49, s: 90, l: 65, a: 39 }\\n```\\n\\n#### `hsvaToHslString`\\n\\n```js\\nhsvaToHslString({ h: 200, s: 40, v: 40, a: 1 }) // => 'hsl(200, 25%, 32%)'\\nhsvaToHslString({ h: 0, s: 0, v: 0, a: 1 }) // => 'hsl(0, 0%, 0%)'\\n```\\n\\n#### `hslStringToHsva`\\n\\n```js\\nhslStringToHsva('hsl(0, 0%, 100%)') // => { h: 0, s: 0, v: 100, a: 1 }\\n```\\n\\n#### `hslaStringToHsva`\\n\\n```js\\nhslaStringToHsva('hsla(0deg, 0%, 0%, 0.5)') // => { h: 0, s: 0, v: 0, a: 0.5 }\\nhslaStringToHsva('hsla(200, 25%, 32%, 1)') // => { h: 200, s: 40, v: 40, a: 1 }\\nhslaStringToHsva('hsla(.5turn 25% 32% / 50%)') // => { h: 180, s: 40, v: 40, a: 0.5 }\\n```\\n\\n#### `hsvaToRgba`\\n\\n```js\\nhsvaToRgba({ h: 0, s: 0, v: 100, a: 1 }) //=> { r: 255, g: 255, b: 255, a: 1 }\\nhsvaToRgba({ h: 128, s: 0, v: 100, a: 1 }) //=> { r: 255, g: 255, b: 255, a: 1 }\\nhsvaToRgba({ h: 0, s: 100, v: 100, a: 0.567 }) //=> { r: 255, g: 0, b: 0, a: 0.567 }\\n```\\n\\n#### `rgbaToHsva`\\n\\n```js\\nrgbaToHsva({ r: 255, g: 255, b: 255, a: 1 }) // => { h: 0, s: 0, v: 100, a: 1 }\\n```\\n\\n#### `rgbStringToHsva`\\n\\n```js\\nrgbStringToHsva('rgb(255, 255, 255)') // => { h: 0, s: 0, v: 100, a: 1 }\\n```\\n\\n#### `hsvaToRgbString`\\n\\n```js\\nhsvaToRgbString({ h: 0, s: 0, v: 100, a: 1 }) // => rgb(255, 255, 255)\\n```\\n\\n#### `hsvaToRgbaString`\\n\\n```js\\nhsvaToRgbaString({ h: 200, s: 40, v: 40, a: 0.5 }) // => rgba(61, 88, 102, 0.5)\\n```\\n\\n#### `rgbaStringToHsva`\\n\\n```js\\nrgbaStringToHsva('rgba(61, 88, 102, 0.5)') // => { h: 200, s: 40, v: 40, a: 0.5 }\\n```\\n\\n#### `hsvaToHsvaString`\\n\\n```js\\nhsvaToHsvaString({ h: 0, s: 0, v: 100, a: 1 }) // => hsva(0, 0%, 100%, 1)\\n```\\n\\n#### `hsvaToHsvString`\\n\\n```js\\nhsvaToHsvString({ h: 0, s: 0, v: 100, a: 1 }) // => hsv(0, 0%, 100%)\\n```\\n\\n#### `hsvStringToHsva`\\n\\n```js\\nhsvStringToHsva('hsv(0, 11%, 0%)') //=> { h: 0, s: 11, v: 0, a: 1, }\\nhsvStringToHsva('hsv(90deg 20% 10%)') //=> { h: 90, s: 20, v: 10, a: 1, }\\nhsvStringToHsva('hsv(100grad 20% 10%)') //=> { h: 90, s: 20, v: 10, a: 1, }\\n```\\n\\n#### `rgbaToRgb`\\n\\n```js\\nrgbaToRgb({ r: 0, g: 0, b: 0, a: 1 }) //=> { r: 0, g: 0, b: 0 }\\n```\\n\\n#### `hslaToHsl`\\n\\n```js\\nhslaToHsl({ h: 0, s: 0, l: 0, a: 1 }) //=> { h: 0, s: 0, l: 0 }\\n```\\n\\n#### `hsvaToHsv`\\n\\n```js\\nhsvaToHsv({ h: 0, s: 0, v: 0, a: 1 }) //=> { h: 0, s: 0, v: 0 }\\n```\\n\\n#### `equalHex`\\n\\n```js\\nequalHex(\\\"#8c0dba\\\", \\\"#8c0dba\\\") // => true\\n```\\n\\n#### `equalColorObjects`\\n\\n```js\\nequalColorObjects({ h: 0, s: 0, v: 5, a: 0.5 }, { h: 0, s: 0, v: 5, a: 0.5 }) // => true\\n```\\n\\n#### `equalColorString`\\n\\n```js\\nequalColorString(\\\"rgb(0,0,0)\\\", \\\"rgb(0, 0, 0)\\\") //=> true\\n```\\n\\n#### `hsvaToHslaString`\\n\\n```js\\nhsvaToHslaString({ h: 200, s: 40, v: 40, a: 0.5 }) //=> hsla(200, 25%, 32%, 0.5)\\n```\\n\\n#### `validHex`\\n\\n```js\\nvalidHex(\\\"#8c0dba\\\") //=> true\\n```\\n\\n#### `rgbaToHexa`\\n\\n```js\\nrgbaToHexa({ b: 26, g: 2, r: 209, a: 1 }) // => '#d1021aff'\\n```\\n\\n#### `hexToXY`\\n\\n```js\\nhexToXY('#4780f1') // => { x: 0.261, y: 0.231, bri: 0.863 }\\n```\\n\\n#### `xyToHex`\\n\\n```js\\nxyToHex({ x: 0.261, y: 0.231, bri: 0.863 }) // => #4780f1\\n```\\n\\n#### `rgbToXY`\\n\\n```js\\nrgbToXY({ r: 71, g: 128, b: 241 }) // => { x: 0.261, y: 0.231, bri: 0.863 }\\n```\\n\\n#### `xyToRgb`\\n\\n```js\\nxyToRgb({ x: 0.261, y: 0.231, bri: 0.863 }) // => { r: 71, g: 128, b: 241 }\\n```\\n\\n#### `color`\\n\\n```js\\nconst { rgb, rgba, hsl, hsv, hsla, hsva } = color('#d1021a');\\n// rgb   => { b: 26, g: 2, r: 209, }\\n// rgba  => { b: 26, g: 2, r: 209, a: 1 }\\n// hsl   => { h: 353.04347826086956, l: 41.37254901960784, s: 98.10426540284361 }\\n// hsla  => { h: 353.04347826086956, l: 41.37254901960784, s: 98.10426540284361, a: 1 }\\n// hsv   => { h: 353.04347826086956, s: 99.04306220095694, v: 81.96078431372548 }\\n// hsva  => { h: 353.04347826086956, s: 99.04306220095694, v: 81.96078431372548, a: 1 }\\n// hex   => '#d1021a'\\n// hexa  => '#d1021aff'\\n```\\n\\n<!--footer-dividing-->\\n\\n## type\\n\\n```ts\\nexport type ObjectColor = RgbColor | HslColor | HsvColor | RgbaColor | HslaColor | HsvaColor;\\nexport type ColorResult = {\\n    rgb: RgbColor;\\n    hsl: HslColor;\\n    hsv: HsvColor;\\n    rgba: RgbaColor;\\n    hsla: HslaColor;\\n    hsva: HsvaColor;\\n    hex: string;\\n    hexa: string;\\n};\\nexport interface HsvColor {\\n    h: number;\\n    s: number;\\n    v: number;\\n}\\nexport interface HsvaColor extends HsvColor {\\n    a: number;\\n}\\nexport interface RgbColor {\\n    r: number;\\n    g: number;\\n    b: number;\\n}\\nexport interface RgbaColor extends RgbColor {\\n    a: number;\\n}\\n/**\\n * ```js\\n * rgbaToHsva({ r: 255, g: 255, b: 255, a: 1 }) //=> { h: 0, s: 0, v: 100, a: 1 }\\n * ```\\n */\\nexport declare const rgbaToHsva: ({ r, g, b, a }: RgbaColor) => HsvaColor;\\nexport declare const hsvaToHslString: (hsva: HsvaColor) => string;\\nexport declare const hsvaToHsvString: ({ h, s, v }: HsvaColor) => string;\\nexport declare const hsvaToHsvaString: ({ h, s, v, a }: HsvaColor) => string;\\nexport declare const hsvaToHslaString: (hsva: HsvaColor) => string;\\nexport declare const hslStringToHsla: (str: string) => HslaColor;\\nexport declare const hslaStringToHsva: (hslString: string) => HsvaColor;\\nexport declare const hslStringToHsva: (hslString: string) => HsvaColor;\\nexport declare const hslaToHsva: ({ h, s, l, a }: HslaColor) => HsvaColor;\\nexport interface HslColor {\\n    h: number;\\n    s: number;\\n    l: number;\\n}\\nexport interface HslaColor extends HslColor {\\n    a: number;\\n}\\nexport declare const hsvaToHsla: ({ h, s, v, a }: HsvaColor) => HslaColor;\\nexport declare const hsvaStringToHsva: (hsvString: string) => HsvaColor;\\nexport declare const parseHue: (value: string, unit?: string) => number;\\nexport declare const hsvStringToHsva: (hsvString: string) => HsvaColor;\\nexport declare const rgbaStringToHsva: (rgbaString: string) => HsvaColor;\\nexport declare const rgbStringToHsva: (rgbaString: string) => HsvaColor;\\n/** Converts an RGBA color plus alpha transparency to hex */\\nexport declare const rgbaToHex: ({ r, g, b }: RgbaColor) => string;\\nexport declare const rgbaToHexa: ({ r, g, b, a }: RgbaColor) => string;\\nexport type HexColor = `#${string}`;\\nexport declare const hexToHsva: (hex: string) => HsvaColor;\\nexport declare const hexToRgba: (hex: string) => RgbaColor;\\n/**\\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\\n */\\nexport declare const hsvaToRgba: ({ h, s, v, a }: HsvaColor) => RgbaColor;\\nexport declare const hsvaToRgbString: (hsva: HsvaColor) => string;\\nexport declare const hsvaToRgbaString: (hsva: HsvaColor) => string;\\nexport declare const rgbaToRgb: ({ r, g, b }: RgbaColor) => RgbColor;\\nexport declare const hslaToHsl: ({ h, s, l }: HslaColor) => HslColor;\\nexport declare const hsvaToHex: (hsva: HsvaColor) => string;\\nexport declare const hsvaToHexa: (hsva: HsvaColor) => string;\\nexport declare const hsvaToHsv: ({ h, s, v }: HsvaColor) => HsvColor;\\nexport declare const color: (str: string | HsvaColor) => ColorResult;\\nexport declare const getContrastingColor: (str: string | HsvaColor) => \\\"#ffffff\\\" | \\\"#000000\\\";\\nexport declare const equalColorObjects: (first: ObjectColor, second: ObjectColor) => boolean;\\nexport declare const equalColorString: (first: string, second: string) => boolean;\\nexport declare const equalHex: (first: string, second: string) => boolean;\\nexport declare const validHex: (hex: string) => hex is HexColor;\\n```\\n\\n## Contributors\\n\\nAs always, thanks to our amazing contributors!\\n\\n<a href=\\\"https://github.com/uiwjs/react-color/graphs/contributors\\\">\\n  <img src=\\\"https://uiwjs.github.io/react-color/coverage/CONTRIBUTORS.svg\\\" />\\n</a>\\n\\nMade with [contributors](https://github.com/jaywcjlove/github-action-contributors).\\n\\n## License\\n\\nLicensed under the MIT License.\\n\",\n    headings:[],\n    headingsList:[],\n  }"],"names":["components","data","source","headings","headingsList"],"sourceRoot":""}